%script{:src => "http://cdn.pubnub.com/socket.io.min.js"}

:javascript
  var pubnub_setup = {
      channel       : 'video_chat_channel',
      publish_key   : 'pub-c-e22a8e3b-38a1-402a-82ed-0b191f241040',
      subscribe_key : 'sub-c-889ce9ac-4c9b-11e2-ab93-12313f022c90'
  };

  var socket = io.connect( 'http://pubsub.pubnub.com', pubnub_setup );
  var pc;
  var localStream;
  var remoteStream;
  var localVideo;
  var remoteVideo;
  var miniVideo;
  var card;
  var initiator = false;
  var offerSdp;
  var offerStr;
  var answerStr;
  var channelReady = false;
  var started = false;
  var callerId;
  var calleeId;
  
  var MSG_HELLO = "hello";
  var MSG_HELLO_BACK = "hello_back";
  var MSG_BYE = "bye";
  var MSG_CALL = "call";
  var MSG_SDP = "sdp";
  var MSG_CALL_READY = "call_ready";
  
  var SDP_OFFER = "offer";
  var SDP_ANSWER = "answer";
  var SDP_CANDIDATE = "candidate";
  
  var mediaConstraints = {'mandatory': {
                            'OfferToReceiveAudio':true, 
                            'OfferToReceiveVideo':true }};

  socket.on( 'connect', function() {
    socket.send("{\"client-id\":\"#{@client_id}\"," +
                "\"type\":\"" + MSG_HELLO + "\"," +
                "\"time\":\"#{@time}\"," +
                "\"first_name\":\"#{@profile['first_name']}\"," +
                "\"last_name\":\"#{@profile['last_name']}\"}");
  });

  socket.on( 'message', function(message) {
    var json = JSON.parse(message);

    // if message originator is other client
    if (json['client-id'] != "#{@client_id}") {
      console.log(message);
    
      if (json['type'] == MSG_HELLO) {
        $('#online-users').append(
          "<div id='" + json['client-id'] + "'>"+ json['first_name'] + " " + json['last_name'] +
          " <button type='button' class='btn' data-loading-text='Calling...'>Call</button>" +
          "</div>");
          
        socket.send("{\"client-id\":\"#{@client_id}\"," +
                    "\"to-client-id\":\"" + json['client-id'] + "\"," +
                    "\"type\":\"" + MSG_HELLO_BACK + "\"," +
                    "\"time\":\"#{@time}\"," +
                    "\"first_name\":\"#{@profile['first_name']}\"," +
                    "\"last_name\":\"#{@profile['last_name']}\"}");
      } else if (json['type'] == MSG_BYE) {
        var element = $("#" + json['client-id']);
        element.remove();
      } else if (json['type'] == MSG_CALL) {
        if (json['to-client-id'] == "#{@client_id}") {
          callerId = json['client-id'];
          doGetUserMedia();
        }
      } else if (json['type'] == MSG_CALL_READY) {
        if (json['to-client-id'] == "#{@client_id}") {
          doCall();
        }
      } else if (json['type'] == MSG_SDP) {
        if (json['sdp-type'] == SDP_OFFER + "1") {
          offerStr = json['sdp-body'];
        } else if (json['sdp-type'] == SDP_OFFER + "2") {
          offerStr = offerStr + json['sdp-body'];
          offerSdp = {"type": SDP_OFFER, "sdp": offerStr};
          pc.setRemoteDescription(new RTCSessionDescription(offerSdp));
          channelReady = true;
          doAnswer();
        } else if (json['sdp-type'] == SDP_ANSWER + "1") {
          answerStr = json['sdp-body'];
        } else if (json['sdp-type'] == SDP_ANSWER + "2") {
          answerStr = answerStr + json['sdp-body'];
          var sdp = {"type": SDP_ANSWER, "sdp": answerStr};
          pc.setRemoteDescription(new RTCSessionDescription(sdp));
          channelReady = true;
        } else if (json['sdp-type'] == SDP_CANDIDATE) {
          console.log('started = ' + started);
          if (started && channelReady) {
            var label = parseInt(json['sdp-label']);
            var canStr = JSON.stringify(json['sdp-candidate']);
            canStr = canStr.substring(1, canStr.length - 1);
            console.log('candidate = ' + canStr);
            var candidate = new RTCIceCandidate({sdpMLineIndex:label,
                                              candidate:canStr});
            pc.addIceCandidate(candidate);
          }
        }
      }
    }
    
    // if message originator wants to send message to this client
    if (json['to-client-id'] == "#{@client_id}") {
      if (json['type'] == MSG_HELLO_BACK) {
        $('#online-users').append(
          "<div id='" + json['client-id'] + "'>"+ json['first_name'] + " " + json['last_name'] +
          " <button type='button' class='btn' onclick='onCallClick(\"" + json['client-id'] + "\");' data-loading-text='Calling...'>Call</button>" +
          "</div>");
      }
    }
    
  } );

  window.onbeforeunload = function() {
    stop();
    socket.send("{\"client-id\":\"#{@client_id}\"," +
                "\"type\":\"" + MSG_BYE + "\"," +
                "\"time\":\"#{@time}\"}");
    postDummyData();
  };
  
  function postDummyData() {      
      $.ajax({url: '/main/wait', async: false, type: 'POST', data: { foo: "bar" }});
  }
  
  function stop() {
    if (localStream) {
      localStream.stop();
      localStream = null;
    }
    started = false;
    isAudioMuted = false;
    isVideoMuted = false;
    if (pc != null) {
      pc.close();
      pc = null;
    }
  }
  
  function onCallClick(client_id) {
    initiator = true;
    calleeId = client_id;
    doGetUserMedia();
  }

  function doGetUserMedia() {
    localVideo = document.getElementById("localVideo");
    miniVideo = document.getElementById("miniVideo");
    remoteVideo = document.getElementById("remoteVideo");
    card = document.getElementById("card");
    // Call into getUserMedia via the polyfill (adapter.js).
    var constraints = {"mandatory": {}, "optional": []}; 
    try {
      getUserMedia({'audio':true, 'video':constraints}, onUserMediaSuccess,
                   onUserMediaError);
      console.log("Requested access to local media with mediaConstraints:\n" +
                  "  \"" + JSON.stringify(constraints) + "\"");
    } catch (e) {
      alert("getUserMedia() failed. Is this a WebRTC capable browser?");
      console.log("getUserMedia failed with exception: " + e.message);
    }
  }
  
  function onUserMediaSuccess(stream) {
    console.log("User has granted access to local media.");
    // Call the polyfill wrapper to attach the media stream to this element.
    attachMediaStream(localVideo, stream);
    localVideo.style.opacity = 1;
    localStream = stream;
    createPeerConnection();
    pc.addStream(localStream);
    started = true;
    
    if (initiator == true) {
      socket.send("{\"client-id\":\"#{@client_id}\"," +
                  "\"to-client-id\":\"" + calleeId + "\"," +
                  "\"type\":\"" + MSG_CALL + "\"," +
                  "\"time\":\"#{@time}\"}");
    } else {
      socket.send("{\"client-id\":\"#{@client_id}\"," +
                  "\"to-client-id\":\"" + callerId + "\"," +
                  "\"type\":\"" + MSG_CALL_READY + "\"," +
                  "\"time\":\"#{@time}\"}");
    }
  }
  
  function onUserMediaError(error) {
    console.log("Failed to get access to local media. Error code was " + error.code);
  }
  
  function onIceCandidate(event) {
    if (event.candidate) {
      sendMessage({type: 'candidate',
                   label: event.candidate.sdpMLineIndex,
                   id: event.candidate.sdpMid,
                   candidate: event.candidate.candidate});
    } else {
      console.log("End of candidates.");
    }
  }
  
  function createPeerConnection() {
    var pc_config = {"iceServers": [{"url": "stun:stun.l.google.com:19302"}]};
    try {
      // Create an RTCPeerConnection via the polyfill (adapter.js).
      pc = new RTCPeerConnection(pc_config);
      pc.onicecandidate = onIceCandidate;
      console.log("Created RTCPeerConnnection with config:\n" + "  \"" +
                  JSON.stringify(pc_config) + "\".");
    } catch (e) {
      console.log("Failed to create PeerConnection, exception: " + e.message);
      alert("Cannot create RTCPeerConnection object; WebRTC is not supported by this browser.");
        return;
    }

    pc.onconnecting = onSessionConnecting;
    pc.onopen = onSessionOpened;
    pc.onaddstream = onRemoteStreamAdded;
    pc.onremovestream = onRemoteStreamRemoved;
  }
  
  function onSessionConnecting(message) {
    console.log("Session connecting.");
  }
  
  function onSessionOpened(message) {
    console.log("Session opened.");
  }

  function onRemoteStreamAdded(event) {
    console.log("Remote stream added.");
    // TODO(ekr@rtfm.com): Copy the minivideo on Firefox
    miniVideo.src = localVideo.src;
    attachMediaStream(remoteVideo, event.stream);
    remoteStream = event.stream;
    waitForRemoteVideo();  
  }
  
  function waitForRemoteVideo() {
    console.log('waitForRemoteVideo');
    if (remoteStream.videoTracks.length === 0 || remoteVideo.currentTime > 0) {
      transitionToActive();
    } else {
      console.log('not transition yet');
      setTimeout(waitForRemoteVideo, 500);
    }
  }
  function transitionToActive() {
    console.log('transitionToActive');
    remoteVideo.style.opacity = 1;
    card.style.webkitTransform = "rotateY(180deg)";
    setTimeout(function() { localVideo.src = ""; }, 500);
    setTimeout(function() { miniVideo.style.opacity = 1; }, 1000);
    //setStatus("<input type=\"button\" id=\"hangup\" value=\"Hang up\" onclick=\"onHangup()\" />");
  }
  function transitionToWaiting() {
    console.log('transitionToWaiting');
    card.style.webkitTransform = "rotateY(0deg)";
    setTimeout(function() {
                 localVideo.src = miniVideo.src;
                 miniVideo.src = "";
                 remoteVideo.src = "" }, 500);
    miniVideo.style.opacity = 0;
    remoteVideo.style.opacity = 0;
    //resetStatus();
  }
  function transitionToDone() {
    console.log('transitionToDone');
    localVideo.style.opacity = 0;
    remoteVideo.style.opacity = 0;
    miniVideo.style.opacity = 0;
    //setStatus("You have left the call. <a href=\"{{ room_link }}\">Click here to rejoin.");
  }
  
  function onRemoteStreamRemoved(event) {
    console.log("Remote stream removed.");
  }
  
  function doCall() {
    console.log("Sending offer to peer.");
    pc.createOffer(setLocalAndSendMessage, null, mediaConstraints);
  }

  function doAnswer() {
    console.log("Sending answer to peer.");
    pc.createAnswer(setLocalAndSendMessage, null, mediaConstraints);
  }

  function setLocalAndSendMessage(sessionDescription) {
    // Set Opus as the preferred codec in SDP if Opus is present.
    sessionDescription.sdp = preferOpus(sessionDescription.sdp);
    pc.setLocalDescription(sessionDescription);
    sendMessage(sessionDescription);
  }

  function sendMessage(message) {
    if (message['type'] == SDP_OFFER) {
      var jsonStr = JSON.stringify(message['sdp']);
      jsonStr = jsonStr.substring(1, jsonStr.length - 1);
      var body1 = jsonStr.substring(0, jsonStr.length / 2);
      var body2 = jsonStr.substring(jsonStr.length / 2)
      var sdpMessage1 = "{\"client-id\":\"#{@client_id}\"," +
                "\"type\":\"" + MSG_SDP + "\"," +
                "\"sdp-type\":\"offer1\"," +
                "\"sdp-body\":\"" + body1 + "\"}";
      socket.send(sdpMessage1);
          
      var sdpMessage2 = "{\"client-id\":\"#{@client_id}\"," +
                "\"type\":\"" + MSG_SDP + "\"," +
                "\"sdp-type\":\"offer2\"," +
                "\"sdp-body\":\"" + body2 + "\"}";
      socket.send(sdpMessage2);
    } else if (message['type'] == SDP_ANSWER) {
      var jsonStr = JSON.stringify(message['sdp']);
      jsonStr = jsonStr.substring(1, jsonStr.length - 1);
      var body1 = jsonStr.substring(0, jsonStr.length / 2);
      var body2 = jsonStr.substring(jsonStr.length / 2)
      var sdpMessage1 = "{\"client-id\":\"#{@client_id}\"," +
                "\"type\":\"" + MSG_SDP + "\"," +
                "\"sdp-type\":\"answer1\"," +
                "\"sdp-body\":\"" + body1 + "\"}";
      socket.send(sdpMessage1);
          
      var sdpMessage2 = "{\"client-id\":\"#{@client_id}\"," +
                "\"type\":\"" + MSG_SDP + "\"," +
                "\"sdp-type\":\"answer2\"," +
                "\"sdp-body\":\"" + body2 + "\"}";
      socket.send(sdpMessage2);
    } else if (message['type'] == SDP_CANDIDATE) {
      var sdpMessage = "{\"client-id\":\"#{@client_id}\"," +
                "\"type\":\"" + MSG_SDP + "\"," +
                "\"sdp-type\":\"" + message['type'] + "\"," +
                "\"sdp-label\":\"" + message['label'] + "\"," +
                "\"sdp-candidate\":" + JSON.stringify(message['candidate']) + "}";
      socket.send(sdpMessage);
    }
  }
  
  // Set Opus as the default audio codec if it's present.
  function preferOpus(sdp) {
    var sdpLines = sdp.split('\r\n');

    // Search for m line.
    for (var i = 0; i < sdpLines.length; i++) {
        if (sdpLines[i].search('m=audio') !== -1) {
          var mLineIndex = i;
          break;
        } 
    }
    if (mLineIndex === null)
      return sdp;

    // If Opus is available, set it as the default in m line.
    for (var i = 0; i < sdpLines.length; i++) {
      if (sdpLines[i].search('opus/48000') !== -1) {        
        var opusPayload = extractSdp(sdpLines[i], /:(\d+) opus\/48000/i);
        if (opusPayload)
          sdpLines[mLineIndex] = setDefaultCodec(sdpLines[mLineIndex], opusPayload);
        break;
      }
    }

    // Remove CN in m line and sdp.
    sdpLines = removeCN(sdpLines, mLineIndex);

    sdp = sdpLines.join('\r\n');
    return sdp;
  }

  function extractSdp(sdpLine, pattern) {
    var result = sdpLine.match(pattern);
    return (result && result.length == 2)? result[1]: null;
  }

  // Set the selected codec to the first in m line.
  function setDefaultCodec(mLine, payload) {
    var elements = mLine.split(' ');
    var newLine = new Array();
    var index = 0;
    for (var i = 0; i < elements.length; i++) {
      if (index === 3) // Format of media starts from the fourth.
        newLine[index++] = payload; // Put target payload to the first.
      if (elements[i] !== payload)
        newLine[index++] = elements[i];
    }
    return newLine.join(' ');
  }

  // Strip CN from sdp before CN constraints is ready.
  function removeCN(sdpLines, mLineIndex) {
    var mLineElements = sdpLines[mLineIndex].split(' ');
    // Scan from end for the convenience of removing an item.
    for (var i = sdpLines.length-1; i >= 0; i--) {
      var payload = extractSdp(sdpLines[i], /a=rtpmap:(\d+) CN\/\d+/i);
      if (payload) {
        var cnPos = mLineElements.indexOf(payload);
        if (cnPos !== -1) {
          // Remove CN payload from m line.
          mLineElements.splice(cnPos, 1);
        }
        // Remove CN line in sdp
        sdpLines.splice(i, 1);
      }
    }

    sdpLines[mLineIndex] = mLineElements.join(' ');
    return sdpLines;
  }

%h4 Online Now

#online-users

#card{:style => "float: left; width: 100%;"}
  #local
    %video#localVideo{:autoplay => "autoplay", :height => "100%", :width => "100%"}
  #remote
    %video#remoteVideo{:autoplay => "autoplay", :height => "100%", :width => "100%"}
#mini
  %video#miniVideo{:autoplay => "autoplay", :height => "100%", :width => "100%"}